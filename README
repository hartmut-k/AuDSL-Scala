AuDSL is a Domain Specific Language for hierarchical state machines "Harel statecharts".
See OBJEKTspektrum 4/2011 for concepts, overview and description.

The textual AuDSL allows effortless formulation of arbitrary complex machines 
and allows for a stateless program to simulate or use such a machine.

While the original implementation is in Pharo Smalltalk using PetitParser
(see squeaksource.com -> AuDSL3 -> DSL for Harel statecharts (Pharo edition) ) 
this implementation uses scala parser combinators and comes as a Scala Trait.

Thus it can easily be inherited by your Scala class (and that in turn used by your Java program)

The most astonishing fact is its size:
- the whole grammar plus all glue-to-the-app code is 64 LOC
- the semantic model (from which the DSL text generates the running program) is 180 LOC

Of course there is more test code than operating code (435 LOC), see loc.txt in AuDSLTest

=========================================================================================
Want to know what it looks like? Here is the spezification of the famous micro wave oven:

  (r: oven
  	(heater
			(idle
				onEntry:		[enableTimeSetting]
				onExit:  			[disableTimeSetting]
				start [doorIsClosed ] -> cooking )
			(cooking
				onEntry:		[startTimer]
				onExit: 		[stopTimer]
				open -> idle
				finish -> idle ) )
		(door
			history
			(open
				close -> closed )
			(closed
				open -> open) ) )

Your main program only implements the guards and actions (in sqare brackets)
=========================================================================================

march 21, 2012
Hartmut Krasemann

